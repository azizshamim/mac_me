#!/usr/bin/env bash
set -e
set -u
set -o pipefail

slapd-setup-test-server() {
    local _host=
    local _port=
    local _server=
    local _server_uri=
    local _data_dir=
    local _suffix=
    local _rootdn=
    local _password=
    _data_dir=$(random-tmpdir)
    _host="127.0.0.1"
    _port="3890"
    _server="${_host}:${_port}"
    _server_uri="ldap://${_server}"
    _socket="${_data_dir}/ldap.sock"
    _server_socket="ldapi://$(url-encode $_socket)"
    _suffix=$(slapd-server-test-suffix)
    _rootdn=$(slapd-server-test-rootdn)
    _password=$(slapd-server-test-password)

    if process-not-running slapd;
    then
        # Spin up a brand new LDAP server
        slapd-server-test-setup-config $_data_dir
        bootstrap-test-ssl $_data_dir
        slapd-server-start $_data_dir/slapd.conf $_server_uri $_server_socket
        slapd-server-test-import-ldifs $_data_dir $_server_socket
    else notify-existing-ldap
    fi
}

slapd-server-test-setup-config() {
    local _tmpdir=
    local _config_src=
    local _config_dest=
    local _ssl_dir=
    local _ssl_ca_cert=
    local _ssl_server_cert=
    local _ssl_server_key=

    _tmpdir="${1:?}"
    _config_src=$(slapd-server-test-config-template)
    _config_dest="${_tmpdir}/$(basename $_config_src)"

    recursive-copy $_config_src $_config_dest
    replace-string "/tmp/slapd" $_tmpdir $_config_dest

    if os-is-osx;
    then replace-string "/etc/ldap" "/etc/openldap" $_config_dest
    fi
}

slapd-server-test-import-ldifs() {
    local _tmpdir=
    local _socket=
    local _file=
    _tmpdir="${1:?}"
    _socket="${2:?}"

    _ldif_dir="${_tmpdir}/ldif"
    _data_dir="${_tmpdir}/example.com"

    recursive-mkdir $_ldif_dir
    recursive-mkdir $_data_dir
    recursive-copy "$(project-root)/test/ldif_data/*.ldif" $_ldif_dir

    for _file in $(files-in-dir $_ldif_dir);
    do
        replace-string "/tmp/slapd" $_tmpdir $_file
        ldap-ldif-add $_file $_socket
    done
}

notify-existing-ldap() {
    local _ldap_server_pid=
    local _ldap_server=

    _ldap_server_pid=$(lookup-pid slapd)
    _ldap_server=$(slapd-get-server-uri-from-pid $_ldap_server_pid)
    _ldap_socket=$(slapd-get-server-socket-from-pid $_ldap_server_pid)

    debug "[notify-existing-ldap] ldap server already running:"
    debug "[notify-existing-ldap]   * ${_ldap_server}"
    debug "[notify-existing-ldap]   * ${_ldap_socket}"

    true
}

slapd-get-server-uri-from-pid() {
    local _pid=
    local _procline=
    local _regex=
    _pid="${1:?}"
    _procline=$(get-procline-from-pid $_pid)
    _regex="(ldap[s]?://.*:[0-9]+)\s?"

    [[ $_procline =~ $_regex ]]
    echo ${BASH_REMATCH[1]}
}

slapd-get-server-socket-from-pid() {
    local _pid=
    local _procline=
    local _regex=
    local _match=
    _pid="${1:?}"
    _procline=$(get-procline-from-pid $_pid)
    _regex="ldapi://(.*)\s?"

    [[ $_procline =~ $_regex ]]
    _match=${BASH_REMATCH[1]}
    echo "ldapi://$(url-decode $_match)"
}

slapd-get-data-dir-from-pid() {
    local _pid=
    local _procline=
    local _regex=
    _pid="${1:?}"
    _procline=$(get-procline-from-pid $_pid)
    _regex="(ldap[s]?://.*:[0-9]+)\s?"

    [[ $_procline =~ $_regex ]]
    echo ${BASH_REMATCH[1]}
}

slapd-server-start() {
    local _config=
    local _server=
    local _socket=
    local _cmd=
    local _data_dir=
    _config="${1:?}"
    _server="${2:?}"
    _socket="${3:-}"
    _data_dir=$(dirname $_config)

    _cmd="$(slapd-cmd) -f $_config -F $_data_dir -h '$_server $_socket'"
    execute-string "${_cmd}"
    debug "[slapd-server-start] Started slapd server on ${_server} with config ${_config}"
}

slapd-server-stop() {
    local _pid=
    _pid="${1:?}"

    kill -9 $_pid
    debug "[slapd-server-stop] stopped slapd server (PID: ${_pid})"
}

ldapcmd-check-osx() {
    local _cmd=
    local _homebrew_dir=
    _cmd="${1:?}"
    _homebrew_dir="${HOMEBREW_ROOT}/Cellar/openldap/2.4.43"

    if file-exists $_homebrew_dir/bin/$_cmd;
    then echo $_homebrew_dir/bin/$_cmd;
    elif file-exists $_homebrew_dir/sbin/$_cmd;
    then echo $_homebrew_dir/sbin/$_cmd;
    else ldap-error-enable-to-find-ldapcmd $_cmd;
    fi
}

ldapcmd-check() {
    local _cmd=
    _cmd="${1:?}"

    if executable-in-path $_cmd;
    then echo $_cmd;
    else ldap-error-unable-to-find-ldapadd $_cmd;
    fi
}

ldapmodify-cmd() {
    if os-is-osx;
    then ldapcmd-check-osx ldapmodify
    else ldapcmd-check ldapmodify
    fi
}

ldapadd-cmd() {
    if os-is-osx;
    then ldapcmd-check-osx ldapadd
    else ldapcmd-check ldapadd
    fi
}

slappasswd-cmd() {
    if os-is-osx;
    then ldapcmd-check-osx slappasswd
    else ldapcmd-check slappasswd
    fi
}

ldap-ldif-add() {
    local _file=
    local _socket=
    local _cmd=
    local _args=
    _file="${1:?}"
    _socket="${2:?}"

    _cmd="$(ldapmodify-cmd) ${_args} -Y EXTERNAL -H ${_socket} -f ${_file}"

    if file-exists $_file;
    then execute-string $_cmd
    else fail-loudly "[ldapmodify-ldif] Unable to apply LDIF ${_file} to ${_server}"
    fi

}

slapd-server-test-password-ssha() {
    echo $(`slappasswd-cmd` -s "`slapd-server-test-password`")
}

slapd-server-test-password() {
    echo "test"
}

slapd-server-test-rootdn() {
    echo "cn=admin,$(slapd-server-test-suffix)"
}

slapd-server-test-suffix() {
    echo "dc=example,dc=com"
}

slapd-server-test-config-template() {
    echo "$(project-root)/test/configs/slapd.conf"
}

slapd-error-cannot-find-cmd() {
    error "Unable to find the 'slapd' executable ${1:?}"
    exit 1
}

ldap-error-cannot-find-ldif() {
    error "Cannot find LDIF file ${1:?}"
    exit 1
}

slapd-cmd-check-osx() {
    # slapd-cmd-check /usr/libexec
    slapd-cmd-check /opt/boxen/homebrew/Cellar/openldap/2.4.43/libexec
}

slapd-cmd-check() {
    local _dir=
    _dir="${1}"
    _cmd='slapd'
    _path="${_dir}/${_cmd}"

    if directory-exists $_dir;
    then
        if file-exists $_path;
        then echo $_path;
        else slapd-error-cannot-find-cmd $_path;
        fi
    else
        if executable-in-path $_cmd;
        then echo $_cmd;
        else slapd-error-cannot-find-cmd $_cmd;
        fi
    fi
}

slapd-cmd() {
   if os-is-osx;
   then slapd-cmd-check-osx;
   else slapd-cmd-check;
   fi
}
