#!/usr/bin/env bash
set -e
set -u
set -o pipefail

slapd-setup-test-server() {
    local _host=
    local _port=
    local _server=
    local _server_uri=
    local _data_dir=
    local _suffix=
    local _rootdn=
    local _password=
    _host="127.0.0.1"
    _port=$(random-available-tcp-port)
    _server="${_host}:${_port}"
    _server_uri="ldap://${_server}"
    _data_dir=$(random-tmpdir)
    _suffix=$(slapd-server-test-suffix)
    _rootdn=$(slapd-server-test-rootdn)
    _password=$(slapd-server-test-password)

    if process-not-running slapd;
    then
        # Bootstrap SSL Certificate
        bootstrap-test-ssl $_data_dir

        # Spin up a brand new LDAP server
        slapd-server-test-setup-config $_data_dir
        slapd-server-start $_data_dir/slapd.conf $_server_uri

        # Seed initial LDAP data into the temp server
        pushd-quiet $_data_dir

        _base_ldif="$(project-root)/test/ldif_data/base.ldif"

        ldap-client-test-setup-config $_data_dir
        ldap-import-ldif $_base_ldif \
                         $_server_uri \
                         $_rootdn \
                         $_password

        pushd-stepout
        recursive-rm $_data_dir

    else notify-existing-ldap
    fi
}

notify-existing-ldap() {
    local _ldap_server_pid=
    local _ldap_server=

    _ldap_server_pid=$(lookup-pid slapd)
    _ldap_server=$(slapd-get-server-uri-from-pid $_ldap_server_pid)

    debug "[notify-existing-ldap] ldap server already running:"
    debug "[notify-existing-ldap]   * ${_ldap_server}"

    true
}

slapd-get-server-uri-from-pid() {
    local _pid=
    local _procline=
    local _regex=
    _pid="${1:?}"
    _procline=$(get-procline-from-pid $_pid)
    _regex="(ldap[s]?://.*:[0-9]+)\s?"

    [[ $_procline =~ $_regex ]]
    echo ${BASH_REMATCH[1]}
}

slapd-get-data-dir-from-pid() {
    local _pid=
    local _procline=
    local _regex=
    _pid="${1:?}"
    _procline=$(get-procline-from-pid $_pid)
    _regex="(ldap[s]?://.*:[0-9]+)\s?"

    [[ $_procline =~ $_regex ]]
    echo ${BASH_REMATCH[1]}
}

slapd-server-start() {
    local _config=
    local _server=
    local _cmd=
    local _data_dir=
    _config="${1:?}"
    _server="${2:?}"
    _data_dir=$(dirname $_config)

    _cmd="$(slapd-cmd) -f $_config -F $_data_dir -h $_server &"
    execute-string "${_cmd}"
    debug "[slapd-server-start] Started slapd server on ${_server} with config ${_config}"
}

slapd-server-stop() {
    local _pid=
    _pid="${1:?}"

    kill -9 $_pid
    debug "[slapd-server-stop] stopped slapd server (PID: ${_pid})"
}

slapd-cleanup-test-data-dir() {
    recursive-rm "${1:?}"
}

ldapcmd-check() {
    local _cmd=
    _cmd="${1:?}"

    if executable-in-path $_cmd;
    then echo $_cmd;
    else ldap-error-unable-to-find-ldapadd $_cmd;
    fi
}

ldapmodify-cmd() {
    ldapcmd-check ldapmodify
}

ldapadd-cmd() {
    ldapcmd-check ldapadd
}

slappasswd-cmd() {
    ldapcmd-check slappasswd
}

ldap-modify-ldif() {
    local _file=
    local _server=
    local _user_cn=
    local _password=
    local _cmd=
    local _args=
    _file="${1:?}"
    _server="${2:?}"
    _user_cn="${3:?}"
    _password="${4:?}"

    _args="$(ldapcmd-connection-arguments $_server $_user_cn $_password)"
    _cmd="$(ldapmodify-cmd) ${_args} -f ${_file}"

    if file-exists $_file;
    then execute-string $_cmd
    else fail-loudly "[ldapmodify-ldif] Unable to apply LDIF ${_file} to ${_server}"
    fi

}

ldap-import-ldif() {
    local _file=
    local _server=
    local _user_cn=
    local _password=
    local _cmd=
    local _args=
    _file="${1:?}"
    _server="${2:?}"
    _user_cn="${3:?}"
    _password="${4:?}"

    _args="$(ldapcmd-connection-arguments $_server $_user_cn $_password)"
    _cmd="$(ldapadd-cmd) ${_args}"

    if file-exists $_file;
    then execute-string $_cmd
    else fail-loudly "[ldap-import-ldif] Unable to apply LDIF ${_file} to ${_server}"
    fi
}

ldapcmd-connection-arguments() {
    local _server=
    local _user_cn=
    local _password=
    local _server_args=
    local _user_args=
    _server="${1:?}"
    _user_cn="${2:?}"
    _password="${3:?}"

    # Assemble Command Line Arguments
    _server_args="-H ${_server}"
    _user_args="-D '${_user_cn}' -w ${_password}"

    echo "${_server_args} ${_user_args}"
}

slapd-server-test-password-ssha() {
    echo $(`slappasswd-cmd` -s "`slapd-server-test-password`")
}

slapd-server-test-password() {
    echo "test"
}

slapd-server-test-rootdn() {
    echo "cn=admin,cn=config"
}

slapd-server-test-suffix() {
    echo "dc=example,dc=com"
}

slapd-server-test-setup-config() {
    local _tmpdir=
    local _template=
    local _template_file=
    local _destination=
    local _ssl_dir=
    local _ssl_ca_cert=
    local _ssl_server_cert=
    local _ssl_server_key=

    _tmpdir="${1:?}"
    _template=$(slapd-server-test-config-template)
    _template_file=$(basename $_template)
    _destination="${_tmpdir}/${_template_file}"
    _ssl_dir="${_tmpdir}/.ssl"
    _ssl_ca_cert="${_ssl_dir}/ca.crt"
    _ssl_server_cert="${_ssl_dir}/server.crt"
    _ssl_server_key="${_ssl_dir}/server.key"

    recursive-copy $_template $_destination
    replace-string "/tmp/slapd" $_tmpdir $_destination
    echo-to-file "TLSCACertificateFile ${_ssl_ca_cert}" $_destination
    echo-to-file "TLSCertificateFile ${_ssl_server_cert}" $_destination
    echo-to-file "TLSCertificateKeyFile ${_ssl_server_key}" $_destination

    if os-is-osx;
    then replace-string "/etc/ldap" "/etc/openldap" $_destination
    fi
}

slapd-server-test-config-template() {
    echo "$(project-root)/test/configs/slapd.conf"
}

slapd-error-cannot-find-cmd() {
    error "Unable to find the 'slapd' executable ${1:?}"
    exit 1
}

ldap-client-test-setup-config() {
    local _dir=
    local _ssl_dir=
    local _ssl_ca_cert=
    _dir="${1:?}"
    _ssl_dir="${_dir}/.ssl"
    _ca_cert="${_ssl_dir}/ca.crt"

    # echo-to-file "TLS_CACERT ${_ca_cert}" "${_dir}/.ldaprc"
}

ldap-error-cannot-find-ldif() {
    error "Cannot find LDIF file ${1:?}"
    exit 1
}

slapd-cmd-check-osx() {
    slapd-cmd-check /usr/libexec
}

slapd-cmd-check() {
    local _dir=
    _dir="${1}"
    _cmd='slapd'
    _path="${_dir}/${_cmd}"

    if directory-exists $_dir;
    then
        if file-exists $_path;
        then echo $_path;
        else slapd-error-cannot-find-cmd $_path;
        fi
    else
        if executable-in-path $_cmd;
        then echo $_cmd;
        else slapd-error-cannot-find-cmd $_cmd;
        fi
    fi
}

slapd-cmd() {
   if os-is-osx;
   then slapd-cmd-check-osx;
   else slapd-cmd-check;
   fi
}
